#pragma once

// imgui
#include <imgui.h>
#ifndef IMGUI_DEFINE_MATH_OPERATORS
# define IMGUI_DEFINE_MATH_OPERATORS
#endif
#include <imgui_internal.h>

#include "common/fileSys.h"
    
#define STB_IMAGE_IMPLEMENTATION
#include "../libs/glew/include/GL/glew.h"

static ImVec4 Hex2ImVec4(std::string hex)
{
    const static uint8_t __char2int[256]
    {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    };
    while (hex[0] == '#')
        hex = hex.substr(1);
    ImVec4 ret;
    uint32_t t;
    if (hex.size() > 6)
    {
        t =
            (__char2int[hex[0]] << 28) |
            (__char2int[hex[1]] << 24) |
            (__char2int[hex[6]] << 20) |
            (__char2int[hex[7]] << 16) |
            (__char2int[hex[4]] << 12) |
            (__char2int[hex[5]] << 8) |
            (__char2int[hex[2]] << 4) |
            (__char2int[hex[3]] << 0);
    }
    t =
        (__char2int['F'] << 28) |
        (__char2int['F'] << 24) |
        (__char2int[hex[4]] << 20) |
        (__char2int[hex[5]] << 16) |
        (__char2int[hex[2]] << 12) |
        (__char2int[hex[3]] << 8) |
        (__char2int[hex[0]] << 4) |
        (__char2int[hex[1]] << 0);

    ret = ImGui::ColorConvertU32ToFloat4(t);

    return ret;

}


namespace ImGui  // Widgets
{

struct WIcon
{
    GLuint texture;
    int    width;
    int    height;
};

void Overrided_BeginTooltip();

// Simple helper function to load an image into a OpenGL texture with common settings
bool LoadTextureFromFile(const char* filename, WIcon* out_icon);

bool RenderShadow_v1(const ImVec2& p1, const ImVec2& p2, int32_t color, const int32_t& dx, const int32_t& dy, const int32_t& blur, const int32_t& spread, const int32_t& round, const bool& inner);

std::pair<std::string, File_ptr> MyTreeWiew(std::string label, FileMap* map, const ImVec2& size_arg, bool use_ch = false);

void ShowImage(ImGui::WIcon* icon);

bool MyButton(const char* label, const ImVec2& size_arg);

bool MyMenuButton(const char* label, const ImVec2& size_arg);

bool MyCheckBox(ImGuiID id, ImTextureID texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& bg_col, const ImVec4& tint_col);

void TextCentered(std::string text);

void Clock(float t1, float t2, float t3);

}  // namespace ImGui

